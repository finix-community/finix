{ config, pkgs, lib, ... }:
let
  cfg = config.services.anacron;
in
{
  imports = [
    ./providers.scheduler.nix

    # anacron has a hard dependency on cron
    ../cron
  ];

  options.services.anacron = {
    enable = lib.mkOption {
      type = lib.types.bool;
      default = false;
      description = ''
        Whether to enable [anacron](${pkgs.cronie.meta.homepage}) as a system service.

        ::: {.note}
        The `cron` module will also be imported and {option}`services.cron.enable` set
        to `true`.
        :::
      '';
    };

    package = lib.mkOption {
      type = lib.types.package;
      default = pkgs.cronie;
      defaultText = lib.literalExpression "pkgs.cronie";
      description = ''
        The package to use for `anacron`.
      '';
    };

    extraArgs = lib.mkOption {
      type = with lib.types; listOf str;
      default = [ ];
      example = [ "-s" ];
      description = ''
        Additional arguments to pass to `anacron`. See {manpage}`anacron(8)`
        for additional details.
      '';
    };

    settings = lib.mkOption {
      type = lib.types.submodule {
        freeformType = with lib.types; attrsOf str;
        options = {
          NO_MAIL_OUTPUT = lib.mkOption {
            type = with lib.types; nullOr int;
            default = null;
            description = ''
              If defined (and non-empty), the standard output and error descriptors of job processes
              are not redirected and e-mailed.
            '';
          };

          PREFERRED_HOUR = lib.mkOption {
            type = with lib.types; nullOr int;
            default = null;
            description = ''
              Preferred hour of start of the job. If the hour is missed job will be skipped.
            '';
          };

          RANDOM_DELAY = lib.mkOption {
            type = with lib.types; nullOr int;
            default = null;
            description = ''
              Allows delaying job startups by random amount of minutes with upper limit specified
              by this value. The random scaling factor is determined during the cron daemon startup
              so it remains constant for the whole run time of the daemon.

              The maximum number of minutes that will be added to the delay in minutes variable which
              is specified for each job. A `RANDOM_DELAY` set to `12` would therefore add, randomly,
              between `0` and `12` minutes to the delay in minutes for each job in that particular
              `anacrontab`. When set to `0`, no random delay is added.
            '';
          };

          START_HOURS_RANGE = lib.mkOption {
            type = with lib.types; nullOr (strMatching "^([[:digit:]]+)-([[:digit:]]+)$");
            default = null;
            description = ''
              An interval (in hours) when scheduled jobs can be run. In case this time interval is
              missed, for example, due to a power down, then scheduled jobs are not executed that day.
            '';
          };
        };
      };
      default = { };
      description = ''
        `anacrontab` configuration. See {manpage}`anacrontab(5)`
        for additional details.
      '';
    };

    systab = lib.mkOption {
      type = with lib.types; listOf nonEmptyStr;
      default = [ ];
      description = ''
        A list of `anacron` jobs to be appended to the system-wide `anacrontab`.
      '';
    };
  };

  config = lib.mkIf cfg.enable {
    services.cron.enable = true;
    services.cron.systab = [
      "0 0 * * * root ${cfg.package}/bin/anacron ${lib.escapeShellArgs cfg.extraArgs}"
    ];

    environment.etc.anacrontab = {
      mode = "0600";
      text = ''
        # generated by nix, do not edit
        ${lib.concatMapAttrsStringSep "\n" (k: v: "${k}=${toString v}") (lib.filterAttrs (_: v: v != null) cfg.settings)}

        ${lib.concatStringsSep "\n" cfg.systab}
      '';
    };

    services.tmpfiles.anacron.rules = [
      "d /var/spool/anacron 0755"
    ];

    # this module supplies an implementation for `providers.scheduler`
    providers.scheduler.backend = "anacron";
  };
}
